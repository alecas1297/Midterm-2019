Please answer the below Data Structure Questions:

why do we need data structure?
A. In order to locate and retrieve  data it is required to have data in a structured form.Structured form of data makes
   retrieval and manipulation easy.



What are the various operations that can be performed on different Data Structures?
- Searching, Insertion, Deletion, Merging, Traversing

List out the areas in which data structures are applied extensively?
- Operating System, Database Management System, Statistical Analysis Package, Numerical Analysis, Graphics, Artificial Intelligence, Simulation

what is an Array?
- An array in programming is a collection of data/value which has index associated with it.An array shall contain similar
  types of data, an array can be sorted or un sorted.

what is the difference between the Array and ArrayList?
- Array length if fixed but arraylist is dynamic.
- Array members are accessed using [], but ArrayList has a set of methods to access elements and modify them as because aerialist is collection of framework in java.
- Array can store primitive variables and objects but arraylist can store oly Objects.

what is LinkedList?
- linked list is linear data Structure where each element is a separate object which is called node. Each node has
  data and reference to the next node. Last node has reference to null.

How is an Array different from Linked List?
-  An array element is having index number, but a node is having reference to next node.
- In array each element is independent, does not have any connection to the other element
    on the other hand in linked list each node are connected by previous node.
- In Linked list, location or address of elements is stored in the link part of previous
            element/node. In array, no pointers are used like linked list so no need of extra space
            in memory for pointer.
- Linked list consumed extra memory as the link location need to be saved in in the linked part of the previous elements in case of array it is not required.

what is queue?
- It is a linear data structure where elements can be accessed  ob the basis of FIFO.

what is stack?
- Stack is linear data structure where elements can be accessed on the basis of LIFO.

what is FIFO and LIFO?
- FIFO: First In, First Out
LIFO: Last In, First Out

what is the order of complexity?
- For input is of size N, we can say that the algorithm will finish at O(1), O(N), O(N^2), O(N^3), O(N*log(N)) etc.

what is the best case to search an element from an array?
- Best case - you find it (assuming you only need to find one) on the first comparison.

what is the worst case to search an element from an array?
- The worst way to search an element from an array is by the last element.

what is tree in data structure?
- A tree is a widely used abstract data type that simulates a hierarchical tree structure,
  with a root value and subtrees of children with a parent node, represented as set of linked nodes.

what is graph in data structure?
- a graph is an object consisting of a vertex set and a edge set.

what is the difference between the HashTable and HashMap?
- HashTable is a data structure to retain values of key-value pair;
  HashMap accepts key value pair.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
- RDBMS : Array , Network data model : Graph, Hierarchical data model : trees.

How HashMap works in java?
- HashMap accepts key value pair in java.

What is ArrayIndexOutOfBoundsException in java? When it occurs?
- All array accesses are checked at run time; an attempt to use an index that is less than zero or greater than
  or equal to the length of the array.

What are the different ways of copying an array into another array?
- there are four different ways to copy al elements of one array into another array:
  manually, Arrays.copyOf(), System.arraycopy() and Object.clone().

What is difference between an array and a linked list?
- The difference is :
  In array, each element is independent, no connection with previos element or with its location.
  In LinkedList, location or address of elements is stored in the link part of previous element.

What is DFS and BFS?
- DFS: Depth First Search; BFS: Breadth First Search.

What is Recursion?
- Recursion is a basic programming technique that you can use in Java, in which a method calls itself to solve some
  problem.

What are linear and non linear data Structures?
- Linear data structure - all the data arranged in sequence manner.
  Non Linear data structure - all the data are arranged in random manner.

What is Big-(O)-notation?
- Describes the performance or complexity of an algorithm.

Outlined different kind of sorting algorithm with time complexity?
- QuickSort: Best(O(n log(n)); Average(O(nlog(n));worst(O(N^2)
  InsertionSort: Best(O(n));Average(O(n^2));worst(O(n^2))


Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

   Common Data Structure Operations
  Data Structure	    Time Complexity
                      Average	                                        Worst
                      Access	    Search	    Insertion	Deletion	Access	    Search	    Insertion	Deletion
Array	            Θ(1)	    Θ(n)	    Θ(n)	    Θ(n)	    O(1)	    O(n)	    O(n)	    O(n)
Stack	            Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
Queue	            Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
Singly-Linked List	Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
Doubly-Linked List	Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
Skip List	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
Hash Table	        N/A	        Θ(1)	    Θ(1)	    Θ(1)	    N/A	        O(n)	    O(n)	    O(n)
Binary Search Tree	Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
Cartesian Tree	    N/A	        Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(n)	    O(n)	    O(n)
B-Tree	            Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
Red-Black Tree	    Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
Splay Tree	        N/A	        Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(log(n))	O(log(n))	O(log(n))
AVL Tree	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
KD Tree 	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)




